# Add for each survey that I am working on: Write a .csv file with presence absence
# ROC 

srun -p  interactive --mem-per-cpu 32768 -t 04:00:00 --pty bash
R
rm(list=ls())
require(tidyverse)
require(plyr)
require(dplyr)
require(sf)
require(sp)
require(rgeos)
require(rgdal)
require(raster)
require(cmsdm)
require(MOLSDM)
# @ !!!! NEED TO CONVERT TO SAME LAMBERT EQUAL AREA AS MY HUMMINGBIR DSDMS I THINK!
# --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
# Inputs for funcitons within the for loop:
# Load dependencies and prepare paths for SDMs ####
# source('/Users/diegoellis/Desktop/Hummingbird_checklist/Code/Hum_checklists/SDM_richness_comparing_checklists.R')
if(( Sys.info()[['user']] == 'diegoellis' )  == TRUE){
  message('Working locally')
  source('/Users/diegoellis/Desktop/Hummingbird_checklist/Code/Hum_checklists/SDM_richness_comparing_checklists.R')
  source('/Users/diegoellis/Desktop/Hummingbird_checklist/Code/Hum_checklists/buffered_inventory_species_richness_comparison.R')
  hums_with_SDMs <- gsub('_maps_v1.pdf','', list.files('/Users/diegoellis/Dropbox/Diego_Cory_Walter/Hummingbirds_AccuratePts_4_9_18/All_species/v26_All_hummingbird_SDM_Figures/'))
  SDM_figures = hums_with_SDMs
  env =raster('/Users/diegoellis/Dropbox/Diego_Cory_Walter/Hummingbirds_AccuratePts_4_9_18/Inputs/Env/Resampled_chelsa.tif')  
  load('/Users/diegoellis/Desktop/Hummingbirds/Rarity_hummingbird/dirs.rdata')
  allBaseDirs = lapply(allBaseDirs, function(x){
    gsub('/project/fas/jetz/data/Hummingbirds/New_try//v26/', '/Users/diegoellis/Desktop/Hummingbirds/Rarity_hummingbird/', x) # Change the second line to whereever you are putting the Statistic and Maxent folder. 
  })
  allBaseDirs = lapply(allBaseDirs, function(x){
    gsub('/project/fas/jetz/data/Hummingbirds/New_try/v26_inputs/', '/Users/diegoellis/Dropbox/Diego_Cory_Walter/Hummingbirds_AccuratePts_4_9_18/Inputs/', x) # Change the second line to whereever you are putting the Statistic and Maxent folder. 
  })  
  myPath='/Users/diegoellis/Desktop/Hummingbird_half_earth/'
  myPath='/Users/diegoellis/Desktop/Hummingbirds/Rarity_hummingbird/'
  oldPath='/project/fas/jetz/data/Hummingbirds/New_try//v26/'
  indir = '/Users/diegoellis/Desktop/Hummingbird_checklist/Juan_parra_checklists/'
  survey_sites <- read.csv(paste0(indir, 'Sites_8Feb2011.csv'))
  survey_species <- read.csv(paste0(indir, 'SpeciesxSite8Feb2011.csv'))
  path_to_shapefile_EM = '/Users/diegoellis/Dropbox/Diego_Cory_Walter/Hummingbirds_AccuratePts_4_9_18/All_species/Expermap_shp_projected/'
}

if((Sys.info()[['user']] == 'de293')  == TRUE){
  message('Working on HPC')
  source('/project/fas/jetz/data/diego/Hummingbirds/Survey_Data/code/SDM_richness_comparing_checklists.R')
  hums_with_SDMs <- gsub('_maps_v1.pdf','', list.files('/project/fas/jetz/data/Hummingbirds/New_try/v26/Figures/'))
  SDM_figures = hums_with_SDMs
  env =raster('/project/fas/jetz/data/Hummingbirds/New_try/v26_inputs/Env/Resampled_chelsa.tif')  
  load('/project/fas/jetz/data/Hummingbirds/New_try/v26_inputs/dirs.rdata')
  indir = 'project/fas/jetz/data/diego/Hummingbirds/Survey_Data/code/Juan_parra_checklists/'
  survey_sites <- read.csv('/project/fas/jetz/data/diego/Hummingbirds/Survey_Data/code/Juan_parra_checklists/Sites_8Feb2011.csv')
  survey_species <- read.csv('/project/fas/jetz/data/diego/Hummingbirds/Survey_Data/code/Juan_parra_checklists/SpeciesxSite8Feb2011.csv')
  path_to_shapefile_EM = '/project/fas/jetz/data/Hummingbirds/Expert_Shp_Projected/'
  }

version='26'
myPath=NULL
oldPath=NULL
oldPath='/project/fas/jetz/data/Hummingbirds/New_try//v26/'
myPath='/Users/diegoellis/Desktop/Hummingbirds/Rarity_hummingbird/'

survey_species= survey_species[,c(1:2,5)]
survey_jp = left_join(survey_sites, survey_species)
# Create total species richness (true presence) and true absences of the survey
survey_jp <- ddply(survey_jp, 'Communities_IDComm' ,mutate, # Apply the mutate function 
                   N.species_survey_true = length(unique(Spname)), # Create new variables
                   N.species_survey_abs = 276 - N.species_survey_true  ) # For each survey
# head(survey_jp, 14)
df = data.frame(matrix(NA, length(unique(survey_jp$Communities_IDComm)), 16))
names(df) <- c('Survey_ID', 
               'N.species_survey_true', 'True_pres_EMELEV', 'True_pres_EMNOELEV', 'True_pres_NOEMELEV', 'True_pres_NOEMNOELEV',
               'N.species_survey_abs', 'True_abs__EMELEV', 'True_abs_EMNOELEV', 'True_abs_NOEMELEV', 'True_abs_NOEMNOELEV',
               'N.species_total_richness', 'tot_rich_EMELEV', 'tot_rich_EMNOELEV', 'tot_rich_NOEMELEV', 'tot_rich_NOEMNOELEV')

df$Survey_ID <- ddply(survey_jp, 'Communities_IDComm' ,function(x){
  Survey_ID = unique(x$Communities_IDComm)
  data.frame(Survey_ID = Survey_ID)
} )[2]

df$N.species_survey_true <- ddply(survey_jp, 'Communities_IDComm' ,function(x){
  N.species_survey_true = length(unique(x$Spname))
  data.frame(N.species_survey_true = N.species_survey_true)
})[2] # Get the species richness. 

df$N.species_survey_abs = 276 - df$N.species_survey_true # 276 hummingbirds with SDMs
Random_survey <- subset(survey_jp, Communities_IDComm == 2)
sub = Random_survey
print(paste0(unique(Random_survey$CommunityName)))
survey_make_shp_and_raster(sub)
env = crop(env, total.rs) # IMPORTANT STEP!!! 
richnessFile=NULL

# If I want to paralellize this:
# # --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- 
# logPathFile <- "/project/fas/jetz/data/diego/Hummingbirds/code/dSQ/Model_run/Code_for_parallel_v101/Inventory_SDM_validation/log_inventory.log"
# # stopCluster(cl)
# cl <- makePSOCKcluster(system('slurmnodes', intern=TRUE), outfile = logPathFile)
# registerDoParallel(cl)
# getDoParRegistered()
# 
# foreach(j in unique(survey_jp$Communities_IDComm),
#         .packages = c('cmsdm', 'MOLSDM', 'bossMaps', 'tools', "rgeos","maptools" ,"foreach",
#                       'data.table', 'mvabund', 'pROC', 'plyr','dplyr', 'spThin', 'dismo', 'maxnet'),
#         .export=c('allBaseDirs', 'myPath', 'oldPath', 'sub', 'total.rs', 'env'),
#         .verbose=TRUE) %dopar% {
          # j <- 7
j = 3
for(j in unique(survey_jp$Communities_IDComm)){
          print(paste0('Working with survey ID ', j))
          sub <- subset(survey_jp, Communities_IDComm == j)
          print(paste0(unique(sub$CommunityName)))
          survey_make_shp_and_raster(sub)
          # --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
          # For each survey: We create a data frame
          # Type: SDM_type Species: Amazilia tzacatl
          # True Presence 0,1 True Absence 0,1
          # False Presence 0,1 False Absence 0,1
          # --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
          survey_data_frame = data.frame(matrix(NA,
                                                length(all_sp_with_shp_EM),
                                                7
                                                ))
          # TP=True Presence
          # TA=True Absence
          # FP = False Presence
          # FA = False Absence
          names(survey_data_frame) = c('Survey_ID', 'Species',
                                       'TP_Survey', 'TA_Survey',
                                       'TP_EM_NOELEV', 'TA_EM_NOELEV','FP_EM_NOELEV', 'FA_EM_NOELEV',
                                       'TP_EM_ELEV', 'TA_EM_ELEV','FP_EM_ELEV', 'FA_EM_ELEV',
                                       'TP_NOEM_NOELEV', 'TA_NOEM_NOELEV','FP_NOEM_NOELEV', 'FA_NOEM_NOELEV',
                                       'TP_NOEM_NOELEV', 'TA_NOEM_NOELEV','FP_NOEM_NOELEV', 'FA_NOEM_NOELEV'
                                       )
          # survey_data_frame = data.frame( Survey_ID =  print(paste0(unique(sub$CommunityName))),
              
          df_sp_list_within_500kmB = data.frame(matrix(NA, length(all_sp_with_shp_EM), 3))
          
          
          
          df[df$Survey_ID == j,]$True_pres_EMNOELEV = richness_EM_NOELEV_overlap_with_checklist(allBaseDirs,NULL,NULL,myPath,oldPath,NULL,ch_sp_list=sub$Spname,subset_ch = sub,total.rs = total.rs)
          df[df$Survey_ID == j,]$True_pres_EMELEV = richness_EM_ELEV_overlap_with_checklist(allBaseDirs,NULL,NULL,myPath,oldPath,NULL,ch_sp_list=sub$Spname,subset_ch = sub,total.rs = total.rs)
          df[df$Survey_ID == j,]$True_pres_NOEMNOELEV = richness_NOEM_NOELEV_overlap_with_checklist(allBaseDirs,NULL,NULL,myPath,oldPath,NULL,ch_sp_list=sub$Spname,subset_ch = sub,total.rs = total.rs)
          df[df$Survey_ID == j,]$True_pres_NOEMELEV = richness_NOEM_ELEV_overlap_with_checklist(allBaseDirs,NULL,NULL,myPath,oldPath,NULL,ch_sp_list=sub$Spname,subset_ch = sub,total.rs = total.rs)
          # make a buffer of 500km around the survey and get the species list of that buffered survey:
          # 1 is a presence , 0 is an absence
          print('Making a 500km buffer around my survey:')
          with_in_m = 500 * 1000
          # with_in_m = 250 * 1000
          sub_500kmB = gBuffer(sub, width = with_in_m, byid = TRUE)
          print('Getting species list for species within this survey: Overlap rangemaps and this shapefile')
          all_sp_with_shp_EM = paste0(path_to_shapefile_EM, SDM_figures, '.shp')
          sp_list_within_500kmB = NULL
          df_sp_list_within_500kmB = data.frame(matrix(NA, length(all_sp_with_shp_EM), 3))
          names(df_sp_list_within_500kmB) = c('Species', 'Pres_Abs', 'Survey_ID')
          df_sp_list_within_500kmB$Species <- gsub('.shp','', basename(all_sp_with_shp_EM))
          df_sp_list_within_500kmB$Survey_ID = paste0(unique(sub$CommunityName))
          for(x in unique(all_sp_with_shp_EM)){
            print(x)
            s_tmp = readOGR(x)
            nuts_over1 = over(s_tmp, sub_500kmB, returnList = TRUE)
            if( length(unlist(nuts_over1)) > 0 ){
              message(paste0( paste0(unique(s_tmp$SCIENTIFIC)), ' YES intersect with 500km buffered survey ', print(paste0(unique(sub$CommunityName)))))
              
              df_sp_list_within_500kmB[df_sp_list_within_500kmB$Species == gsub(' ', '_', paste0(unique(s_tmp$SCIENTIFIC))) ,]$Pres_Abs <-   1
            }else{
              df_sp_list_within_500kmB[df_sp_list_within_500kmB$Species == gsub(' ', '_', paste0(unique(s_tmp$SCIENTIFIC))) ,]$Pres_Abs <-   0
              message( paste0(unique(s_tmp$SCIENTIFIC)), ' did NOT intersect with 500km buffered survey ', print(paste0(unique(sub$CommunityName))) )
            }
            }
          # Only 1 is presence in the 500km buffer
          df_sp_list_within_500kmB = df_sp_list_within_500kmB %>% subset(Pres_Abs == 1)
          # Now that we have the extended species list of what is in a 500km radius of this 
          # Modify the total presence and the total absence functions!!!!
          # --- --- --- --- --- --- --- --- --- --- --- ---
          # --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
          # Of the Hummingbirds found within a 500km buffer find the total number of species predicted by each SDM type
          # We assume that SDMs without expert maps to predict way more species than SDMs without Expert maps
          # Now ch_sp_list is actually the species list of hummingbirds ocurring within a 500km buffer
          message('Calculating total species richness')
          ch_sp_list_B = df_sp_list_within_500kmB$Species
          buffered_survey = sub_500kmB
          df[df$Survey_ID == j,]$tot_rich_EMNOELEV = total_sp_richness_EM_NOELEV_within_B(allBaseDirs,NULL, NULL,myPath,oldPath,NULL,ch_sp_list_B=df_sp_list_within_500kmB$Species,buffered_survey = sub_500kmB, env=env)
          df[df$Survey_ID == j,]$tot_rich_EMELEV = total_sp_richness_EM_ELEV_within_B(allBaseDirs,NULL, NULL,myPath,oldPath,NULL,ch_sp_list_B=df_sp_list_within_500kmB$Species,subset_ch = sub, env=env)
          df[df$Survey_ID == j,]$tot_rich_NOEMNOELEV = total_sp_richness_NOEM_NOELEV(allBaseDirs,NULL, NULL,myPath,oldPath,NULL,ch_sp_list_B=df_sp_list_within_500kmB$Species,subset_ch = sub, env=env)
          df[df$Survey_ID == j,]$tot_rich_NOEMELEV = total_sp_richness_NOEM_ELEV(allBaseDirs,NULL, NULL,myPath,oldPath,NULL,ch_sp_list_B=df_sp_list_within_500kmB$Species,subset_ch = sub, env=env)
          
          # # Get the true absences for each different SDM type: 
          # This gets true absences
          # Save the output as a .csv for each inventory
          df[df$Survey_ID == j,]$True_abs_EMNOELEV = df[df$Survey_ID == j,]$tot_rich_EMNOELEV - df[df$Survey_ID == j,]$True_pres_EMNOELEV
          df[df$Survey_ID == j,]$True_abs__EMELEV =  276 - df[df$Survey_ID == j,]$True_pres_EMELEV
          df[df$Survey_ID == j,]$True_abs_NOEMNOELEV =  276 - df[df$Survey_ID == j,]$True_pres_NOEMNOELEV
          df[df$Survey_ID == j,]$True_abs_NOEMELEV = 276 - df[df$Survey_ID == j,]$True_pres_NOEMELEV
          # Now get the total species richness for each individual SDM type
          
          # --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
          # 
          # --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---

          #  head(df)
          #  
          #  
          #  library(mapdata)		# the world database in the maps package
          #  # probably isn't high enough resolution
          #  map("worldHires", "Colombia")
          # plot(sub,add=T,col='red')
          #  # Check if total.rs and best.r overlap, if not skip and go to the next hummingbird!!!! 
          # sub <- spTransform(sub, wgs84_proj)
          #  
          # wgs84_proj <-"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
          # 
          #  plot(sub)
          
          
          # Now absent species: 
          
          
          # 
          # myprj = paste0("+proj=laea +lat_0=", unique(round(sub$LatDecDeg)), " +lon_0=", unique(round(sub$LongDecDeg)), ' +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0')
          # sub <- SpatialPointsDataFrame(coords = sub[,c('LongDecDeg','LatDecDeg')], data = sub, proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
          # 
          # sub <- spTransform(sub, myprj)
          # # sub_sf = st_as_sf(sub)
          # # Add a 1km buffer around the location
          # sub = gBuffer(sub, width = 1000, byid = TRUE)
          # # sub_sf = st_as_sf(sub)
          # 
          # ext <- raster::extent(sub)
          # gridsize <- res(env) ## Set up a raster "template" for the resolution we are building are SDMs with
          # r <- raster(ext, res=gridsize)
          # proj4string(r) <- myprj
          # total.rs <- rasterize(sub, r) # same as old rr object
          # values(total.rs)=0
          # plot(total.rs) # Raster of 1km grid cells around it. 
          # names(total.rs) = paste0('Survey_ID_', i)
          # 
          # sub_sf %>% st_buffer(sub_sf, 1000)
        }
# dSQ --taskfile task_file.txt --mem-per-cpu=60G -p week -t 2- > run_amph.sh 
write.csv(df, file = '/project/fas/jetz/data/diego/Hummingbirds/code/dSQ/Model_run/Code_for_parallel_v101/inventory_SDM_dopar.csv')



3 * 1 hour




#!/bin/bash
#SBATCH --mail-type=ALL
#SBATCH --mail-user=diego.ellissoto@yale.edu
#SBATCH --output inventory_SDM-%j.out
#SBATCH -t 5-
#SBATCH -n 1
#SBATCH --mem-per-cpu=100G
#SBATCH -p week
# module load Apps/R/3.4.3-generic
# module load Rpkgs/RGDAL
# module load Libs/GSL
# cd /project/fas/jetz/data/diego/Hummingbirds/code/dSQ/Model_run/Code_for_parallel_v101/
# R --slave -f 11_inventory_SDM.R



# SAPPLY FOR THE INVENTORY SEE HOW MANY SPECIES ARE WITIHIN A 500KM BUFFER
# sapply(all_sp_with_shp_EM ,function(x){
#   print(x)
#   s_tmp = readOGR(x)
#   nuts_over1 = over(s_tmp, sub_500kmB, returnList = TRUE)
#   if( length(unlist(nuts_over1)) > 0 ){
#     message(paste0( paste0(unique(s_tmp$SCIENTIFIC)), ' YES intersect with 500km buffered survey ', print(paste0(unique(sub$CommunityName)))))
#     
#     df[df$Species == gsub(' ', '_', paste0(unique(s_tmp$SCIENTIFIC))) ,]$Pres_Abs <-   1
#   }else{
#     df[df$Species == gsub(' ', '_', paste0(unique(s_tmp$SCIENTIFIC))) ,]$Pres_Abs <-   0
#     message( paste0(unique(s_tmp$SCIENTIFIC)), ' did NOT intersect with 500km buffered survey ', print(paste0(unique(sub$CommunityName))) )
#   }
# })              
# 
# --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
# sapply(all_sp_with_shp_EM ,function(x){
#   print(x)
#   s_tmp = readOGR(x)
#   nuts_over1 = over(s_tmp, sub_500kmB, returnList = TRUE)
#   if( length(unlist(nuts_over1)) > 0 ){
#     message(paste0( paste0(unique(s_tmp$SCIENTIFIC)), ' YES intersect with 500km buffered survey ', print(paste0(unique(sub$CommunityName)))))
#     
#     df[df$Species == gsub(' ', '_', paste0(unique(s_tmp$SCIENTIFIC))) ,]$Pres_Abs <-   1
#   }else{
#     df[df$Species == gsub(' ', '_', paste0(unique(s_tmp$SCIENTIFIC))) ,]$Pres_Abs <-   0
#     message( paste0(unique(s_tmp$SCIENTIFIC)), ' did NOT intersect with 500km buffered survey ', print(paste0(unique(sub$CommunityName))) )
#   }
# })              
# 
# This is more sloppy but works:
# all_sp_with_shp_EM = all_sp_with_shp_EM[1:10]
# sapply(all_sp_with_shp_EM, function(x){
#   print(x)
#   s_tmp = readOGR(x)
#   nuts_over1 = over(s_tmp, sub_500kmB, returnList = TRUE)
#   # if( !is.null(length(unlist(nuts_over1))) ){
#   if( length(unlist(nuts_over1)) > 0 ){
#     message(paste0( paste0(unique(s_tmp$SCIENTIFIC)), ' YES intersect with 500km buffered survey ', print(paste0(unique(sub$CommunityName)))))
#     if(is.null(sp_list_within_500kmB)){
#       sp_list_within_500kmB = unique(s_tmp$SCIENTIFIC)
#     }else{
#       sp_list_within_500kmB = c( sp_list_within_500kmB, paste0(unique(s_tmp$SCIENTIFIC) ))      }
#   }else{
#     message( paste0(unique(s_tmp$SCIENTIFIC)), ' did NOT intersect with 500km buffered survey ', print(paste0(unique(sub$CommunityName))) )
#   }
# 
# })
# 
# s_tmp = readOGR("/Users/diegoellis/Dropbox/Diego_Cory_Walter/Hummingbirds_AccuratePts_4_9_18/All_species/Expermap_shp_projected/Abeillia_abeillei.shp")
# s_tmp = readOGR("/Users/diegoellis/Dropbox/Diego_Cory_Walter/Hummingbirds_AccuratePts_4_9_18/All_species/Expermap_shp_projected/Amazilia_tzacatl.shp")
# plot(s_tmp)
# nuts_over1 = over(s_tmp, sub_500kmB, returnList = TRUE)
# is.null(unlist(nuts_over1))
# 
# obj = fortify(s_tmp)
# 
# Country <- substr(NUTS3$NUTS_ID,1,2)
# Cty <- gUnaryUnion(NUTS3,Country)
# 
# s_tmp = gSimplify(s_tmp, tol =1000)
# plot(s_tmp)
# # This is elegant and works:
# sapply(all_sp_with_shp_EM, function(x){
#   print(x)
#   s_tmp = readOGR(x)
#   if(gIntersects(s_tmp, sub_500kmB)  == 'TRUE' ){
#     # plot(gIntersection(s_tmp, sub_500kmB))
#     message(paste0( paste0(unique(s_tmp$SCIENTIFIC)), ' YES intersect with 500km buffered survey ', print(paste0(unique(sub$CommunityName)))))
#     if(is.null(sp_list_within_500kmB)){
#       sp_list_within_500kmB = unique(s_tmp$SCIENTIFIC)
#     }else{
#       sp_list_within_500kmB = c( sp_list_within_500kmB, paste0(unique(s_tmp$SCIENTIFIC) ))      }
#     
#   }else{message( paste0(unique(s_tmp$SCIENTIFIC)), ' did NOT intersect with 500km buffered survey ', print(paste0(unique(sub$CommunityName))) )}
# })
# 
# 
# 
# sapply(lapply(all_sp_with_shp_EM, readShapePoly), gArea)
# require(maptools)
# sapply(lapply(list(all_sp_with_shp_EM), readShapePoly), gIntersects)
# 
# # sapply(lapply(list.files(pattern="*.shp"), readShapePoly), gArea)
# 
# lapply((list(all_sp_with_shp_EM)), function(x){
#   print(x)  
#   s_tmp = readOGR(all_sp_with_shp_EM[x])
#   s_tmp = readShapePoly(all_sp_with_shp_EM)
#   gIntersects(sub_500kmB, s_tmp)
#   plot(s_tmp)
#   plot(sub_500kmB, add=T)
#   return(s_tmp)
# })
# 
# function(x = )
#   
#   
#   
#   
#   
#   plot(sub_500kmB)
# plot(sub, add=T, col='red')
